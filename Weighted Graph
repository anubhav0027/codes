#include <iostream>
using namespace std;

struct Node{
    int val, cost;
    Node *next;
};
struct Edge{
    int src, dest, weight;
};

class Graph{
    Node *getAdjListNode(int dest,int weight, Node *head){
        Node *newNode = new Node;
        newNode -> val = dest;
        newNode-> cost = weight;
        newNode->next = head;
        return newNode;
    }
    int N;
    public:
    Node **head;
    Graph(Edge edges[], int n , int N){
        head = new Node*[N]();
        this -> N = N;
        for(int i=0; i < N; i++){
            head[i] = nullptr;
        }
        
        for(int i =0; i < n; i++){
            int src = edges[i].src;
            int dest = edges[i].dest;
            int weight = edges[i].weight;
            Node *newNode = getAdjListNode(dest,weight, head[src]);
            head[src] = newNode;
        } 
    }
};

void print(Node *ptr,int i){
    while(ptr != nullptr){
        cout << "( " << i <<"-->" << ptr->val <<" " << ptr->cost << ")";
        ptr= ptr->next;
    }
    cout << endl;
}

int main() {
	// your code goes here
	Edge edges[] = {
	       { 0, 1, 6 }, { 1, 2, 7 }, { 2, 0, 5 }, { 2, 1, 4 },
        { 3, 2, 10 }, { 4, 5, 1 }, { 5, 4, 3 }
	};
	int N = 6;
	int n = sizeof(edges)/sizeof(edges[0]);
	Graph graph(edges, n , N);
	for(int i =0; i<N; i++){
	    print(graph.head[i],i);
	}
	
	return 0;
}
