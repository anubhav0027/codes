
#include<bits/stdc++.h>

using namespace std;
//Longest Common subsequence
int LCS(string A, string B, int X, int Y){
    if(X == 0 || Y == 0){
        return 0;
    }
    if(A[X-1] == B[Y-1]){
        return LCS(A,B,X-1,Y-1) + 1;
    }
    return max(LCS(A,B,X,Y-1), LCS(A,B,X-1,Y));
}

//shortest Common supersequence
int SCS(string A, string B, int m, int n){
    if(m == 0|| n == 0){
        return n+m;
    }
    if(A[m-1] == B[n-1]){
        return SCS(A,B,m-1,n-1) + 1;
    }else{
        return min(SCS(A,B,m-1,n)+1, SCS(A,B, m , n-1)+1);
    }
    
}

//longest increasing subsequence
int LIS(int arr[], int n, int i, int prev){
    if(i == n){
        return 0;
    }
    int excl = LIS(arr, n , i+1 , prev);
    int incl = 0;
    if(arr[i] > prev){
        incl =  1+LIS(arr,n, i+1,arr[i]);
    }
    return max(incl , excl);
}
//total cost to convert a string  into another
int totalCost(string x, int m , string y, int n){
    int cost;
    if(m == 0){
        return n;
    }
    if(n == 0){
        return m;
    }
    if(x[m-1] == y[n-1] ){
        cost = 0;
    }else{
        cost = 1;
    }
    return min(min(totalCost(x,m-1,y,n)+1,
        totalCost(x,m, y, n-1)+1),
        totalCost(x, m-1, y, n -1)+cost);
}
int Look_up[10][10];
int MCM(int arr[],int i , int j){
    if(j <= i+1){
        return 0;
    }
    int min = INT_MAX;
    
    if(Look_up[i][j] == 0){
        for(int k = i+1; k <= j -1; k++){
           int cost= MCM(arr, i , k);
            cost += MCM(arr, k , j);
            cost += arr[i] * arr[k]*arr[j];
            if(min > cost){
                min = cost;
            }
        }
        Look_up[i][j] = min;
    }
    return Look_up[i][j];
}
//Knapsack
int KS(int V[],int W[], int n , int capacity){
    if(capacity < 0){
        return INT_MIN;
    }
    if(n < 0 || capacity == 0){
        return 0;
    }
    int incl = V[n] + KS(V, W, n - 1, capacity-W[n]);
    int excl = KS(V,W,n-1, capacity);
    return max(incl, excl);
}


int main(){
    string A = "ABCCAAC";
    string B = "CACDDAC";
    int n = SCS(A,B,A.length(), B.length());
    cout << n;
    return 0;
}
